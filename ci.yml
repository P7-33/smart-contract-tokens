# This workflow contains all tock-ci, seperated into jobs

name: tock-ci
env:
  TERM: xterm # Makes tput work in actions output

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches-ignore: [ staging.tmp, trying.tmp ] # Run CI for all branches except bors tmp branches
  pull_request: # Run CI for PRs on any branch

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# If you add additional jobs, remember to add them to bors.toml
jobs:
  ci-format:
    strategy:
      matrix:
        os: [ubuntu-latest]
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1 # pulls version from rust-toolchain file
      - uses: actions/setup-node@v1
        with:
          components: rustfmt
      - name: ci-job-format
        run:  make ci-job-format
      - name: ci-markdown-toc
        run: make ci-job-markdown-toc

  ci-clippy:
    strategy:
      matrix:
        os: [ubuntu-latest]
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1 # pulls version from rust-toolchain file
        with:
          components: clippy
      - name: ci-job-clippy
        run:  make ci-job-clippy

  ci-build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1

      - name: ci-job-syntax
        run: make ci-job-syntax
      - name: ci-job-compilation
        run: make ci-job-compilation
      - name: ci-job-debug-support-targets
        run: make ci-job-debug-support-targets

      - name: ci-job-collect-artifacts
        run: make ci-job-collect-artifacts
      - name: upload-build-artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: tools/ci-artifacts

  ci-tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Update package repositories
        run: |
          sudo apt update
        if: matrix.os == 'ubuntu-latest'
      - name: Install dependencies for ubuntu-latest
        run: |
          sudo apt install libudev-dev libzmq3-dev
        if: matrix.os == 'ubuntu-latest'
      - name: Install dependencies for macos-latest
        run: |
          brew install zeromq
        if: matrix.os == 'macos-latest'
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
      - name: ci-job-libraries
        run: make ci-job-libraries
      - name: ci-job-archs
        run: make ci-job-archs
      - name: ci-job-kernel
        run: make ci-job-kernel
      - name: ci-job-chips
        run: make ci-job-chips
      - name: ci-job-tools
        run: make ci-job-tools

  ci-qemu:
    runs-on: ubuntu-latest

    steps:
      - name: Update package repositories
        run: |
          sudo apt update
      - name: Install dependencies
        continue-on-error: true
        run: |
          sudo apt install meson
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
      - name: ci-job-qemu
        run: make ci-job-qemu
